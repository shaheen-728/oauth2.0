/*
 * 3gpp-monitoring-event
 *
 * API for Monitoring Event. Â© 2020, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * API version: 1.1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package main

import (
	"encoding/json"
	"github.com/gorilla/mux"
	sw "go-client-generated/go"
	"log"
	"net/http"
)

func main() {
	log.Printf("Client started")
	r := mux.NewRouter()

	apiService := &sw.MonitoringEventAPISubscriptionLevelPOSTOperationApiService{}
	r.HandleFunc("/{scsAsId}/subscriptions", func(w http.ResponseWriter, r *http.Request) {
		vars := mux.Vars(r)
		scsAsId := vars["scsAsId"]
		newMonitoringEventSubscription := sw.MonitoringEventSubscription{}
		err := json.NewDecoder(r.Body).Decode(&newMonitoringEventSubscription)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		// Call the API function
		resp, _, err := apiService.ScsAsIdSubscriptionsPost(r.Context(), newMonitoringEventSubscription, scsAsId)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(resp)

	}).Methods("POST")
	apiServiceGet := &sw.MonitoringEventAPISubscriptionLevelGETOperationApiService{}
	r.HandleFunc("/{scsAsId}/subscriptions/{subscriptionId}", func(w http.ResponseWriter, r *http.Request) {
		vars := mux.Vars(r)
		scsAsId := vars["scsAsId"]
		subscriptionId := vars["subscriptionId"]

		// Call the API function
		resp, _, err := apiServiceGet.ScsAsIdSubscriptionsSubscriptionIdGet(r.Context(), scsAsId, subscriptionId)
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		if err != nil {
			http.Error(w, err.Error(), http.StatusInternalServerError)
			return
		}
		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(resp)

		// Handle the response
		// ...
	}).Methods("GET")
	//apiService := &sw.MonitoringEventAPISubscriptionLevelDELETEOperationApiService{}
	//r.HandleFunc("/subscriptions/{scsAsId}/{subscriptionId}", func(w http.ResponseWriter, r *http.Request) {
	//	vars := mux.Vars(r)
	//	scsAsId := vars["scsAsId"]
	//	subscriptionId := vars["subscriptionId"]
	//
	//	// Call the API function
	//	_, _, err := apiService.ScsAsIdSubscriptionsSubscriptionIdDelete(r.Context(), scsAsId, subscriptionId)
	//	if err != nil {
	//		http.Error(w, err.Error(), http.StatusInternalServerError)
	//		return
	//	}
	//
	//	// Handle the response
	//	// ...
	//}).Methods("DELETE")
	//
	//apiService := &sw.MonitoringEventAPISubscriptionLevelDELETEOperationApiService{}
	//r.HandleFunc("/subscriptions/{scsAsId}/{subscriptionId}", func(w http.ResponseWriter, r *http.Request) {
	//	vars := mux.Vars(r)
	//	scsAsId := vars["scsAsId"]
	//	subscriptionId := vars["subscriptionId"]
	//
	//	// Call the API function
	//	_, _, err := apiService.ScsAsIdSubscriptionsSubscriptionIdDelete(r.Context(), scsAsId, subscriptionId)
	//	if err != nil {
	//		http.Error(w, err.Error(), http.StatusInternalServerError)
	//		return
	//	}
	//
	//	// Handle the response
	//	// ...
	//}).Methods("DELETE")
	//
	//// Define route for DELETE /subscriptions/{scsAsId}/{subscriptionId}
	//apiService := &sw.MonitoringEventAPISubscriptionLevelDELETEOperationApiService{}
	//r.HandleFunc("/subscriptions/{scsAsId}/{subscriptionId}", func(w http.ResponseWriter, r *http.Request) {
	//	vars := mux.Vars(r)
	//	scsAsId := vars["scsAsId"]
	//	subscriptionId := vars["subscriptionId"]
	//
	//	// Call the API function
	//	_, _, err := apiService.ScsAsIdSubscriptionsSubscriptionIdDelete(r.Context(), scsAsId, subscriptionId)
	//	if err != nil {
	//		http.Error(w, err.Error(), http.StatusInternalServerError)
	//		return
	//	}
	//
	//	// Handle the response
	//	// ...
	//}).Methods("DELETE")
	//
	//router := sw.NewRouter()

	log.Fatal(http.ListenAndServe(":8000", r))
}
